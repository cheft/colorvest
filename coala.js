// Generated by CoffeeScript 1.4.0
var __slice = [].slice;

define(['jquery', 'underscore', 'marionette', 'handlebars', 'backbone', 'coala/core/application', 'coala/core/component-handler', 'coala/core/resource-loader', 'coala/core/config', 'coala/core/loader-plugin-manager', 'coala/core/loaders/default-feature-loader', 'coala/core/loaders/default-view-loader', 'coala/core/sync', 'bootstrap', 'coala/features/dialog'], function($, _, Marionette, Handlebars, Backbone, Application, ComponentHandler, loadResource, config, LoaderPluginManager, featureLoader, viewLoader) {
  var attachDefaultApplicationMethods, coala;
  Marionette.TemplateCache.loadTemplate = function(templateId, callback) {
    return loadResource(templateId, 'text').done(function(template) {
      var tpl;
      tpl = Handlebars.compile(template || '');
      return callback.call(this, tpl);
    });
  };
  Handlebars.registerHelper('appearFalse', function(value) {
    if (value === false) {
      return 'false';
    } else {
      return value;
    }
  });
  coala = {};
  LoaderPluginManager.register(featureLoader);
  LoaderPluginManager.register(viewLoader);
  attachDefaultApplicationMethods = function(app) {
    var c, fn, name, _i, _len, _ref;
    c = new Application();
    app.coala = c;
    delete c.module;
    c.paths = [config.coalaFeaturesPath];
    c.baseName = 'coala';
    c.applicationRoot = app;
    c.getPromises = function() {
      return app.promises;
    };
    c.initRouters();
    c.startFeature = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return app.startFeature.apply(app, args);
    };
    c.settings = app.settings;
    app.loadView = function() {
      var args, feature, name;
      feature = arguments[0], name = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (!feature) {
        throw new Error('a view must be within a feature');
      }
      args = ['view', feature.module, feature, name].concat(args);
      return LoaderPluginManager.invoke.apply(LoaderPluginManager, args);
    };
    app.showDialog = function(options) {
      var deferred;
      deferred = $.Deferred();
      if (!app._modalDialog) {
        app.startFeature('coala/dialog', options).done(function(feature) {
          app._modalDialog = feature;
          return deferred.resolve(feature);
        });
      } else {
        app._modalDialog.show(options).done(function(feature) {
          return deferred.resolve(feature);
        });
      }
      return deferred;
    };
    if (!app.confirm) {
      app.confirm = function(content, fn) {
        if (window.confirm(content)) {
          return fn();
        }
      };
    }
    if (!app.prompt) {
      app.prompt = function(content, fn) {
        var s;
        s = window.prompt(content);
        if (s) {
          return fn(s);
        }
      };
    }
    fn = function(content, title) {
      if (title == null) {
        title = '';
      }
      return alert(title + ': ' + content);
    };
    _ref = ['success', 'info', 'error', 'message'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      if (!app[name]) {
        app[name] = fn;
      }
    }
    return app;
  };
  coala.startBackboneHistory = function(app) {
    var processedUrl;
    if (!Backbone.history) {
      Backbone.history = new Backbone.History();
    }
    processedUrl = {};
    Backbone.history.handlers.push({
      route: /^(.*)$/,
      callback: function(name) {
        var modules, names,
          _this = this;
        if (processedUrl[name] === true || !name) {
          return;
        }
        processedUrl[name] = true;
        names = name.split('/');
        modules = {};
        _.reduce(names, function(memo, n) {
          modules[memo] = app.findModule(memo);
          return [memo, n].join('/');
        });
        app.module(name);
        return app.done(function() {
          var i, m, u;
          i = names.length;
          while (i--) {
            u = names.slice(0, +i + 1 || 9e9).join('/');
            m = app.findModule(u);
            if (!m.router && !modules[u]) {
              delete m.parent[names[i]];
            }
          }
          return Backbone.history.loadUrl(name);
        });
      }
    });
    return Backbone.history.start();
  };
  coala.registerComponentHandler = function(name, init, fn) {
    return ComponentHandler.register(name, init, fn);
  };
  coala.startApplication = function(path) {
    var app;
    app = !path ? require('coala/applications/default')() : require(path)();
    return attachDefaultApplicationMethods(app);
  };
  coala.LoaderPluginManager = LoaderPluginManager;
  return coala;
});
