// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  define(['jquery', 'underscore', 'marionette', 'handlebars', 'backbone', 'coala/core/application', 'coala/core/component-handler', 'coala/core/resource-loader', 'coala/core/config', 'coala/applications/default', 'coala/core/loader-plugin-manager', 'coala/core/loaders/default-feature-loader', 'coala/core/loaders/default-view-loader', 'coala/scaffold/forms-view-loader', 'coala/scaffold/notfound-feature-loader', 'coala/scaffold/views-view-loader', 'coala/scaffold/tree-views-view-loader', 'coala/scaffold/treetable-views-view-loader', 'coala/core/sync'], function($, _, Marionette, Handlebars, Backbone, Application, ComponentHandler, loadResource, config, startDefaultApplication, LoaderPluginManager, featureLoader, viewLoader, formsLoader, notFoundFeatureLoader, viewsLoader, treeViewsLoader, treeTableViewsLoader) {
    var coala;
    Marionette.TemplateCache.loadTemplate = function(templateId, callback) {
      return loadResource(templateId, 'text').done(function(template) {
        var tpl;
        tpl = Handlebars.compile(template || '');
        return callback.call(this, tpl);
      });
    };
    Handlebars.registerHelper('appearFalse', function(value) {
      if (value === false) {
        return 'false';
      } else {
        return value;
      }
    });
    coala = {};
    LoaderPluginManager.register(featureLoader);
    LoaderPluginManager.register(viewLoader);
    LoaderPluginManager.register(formsLoader);
    LoaderPluginManager.register(notFoundFeatureLoader);
    LoaderPluginManager.register(viewsLoader);
    LoaderPluginManager.register(treeViewsLoader);
    LoaderPluginManager.register(treeTableViewsLoader);
    coala.startBackboneHistory = function(app) {
      var processedUrl;
      if (!Backbone.history) {
        Backbone.history = new Backbone.History();
      }
      processedUrl = {};
      Backbone.history.handlers.push({
        route: /^(.*)$/,
        callback: function(name) {
          var modules, names,
            _this = this;
          if (processedUrl[name] === true || !name) {
            return;
          }
          processedUrl[name] = true;
          names = name.split('/');
          modules = {};
          _.reduce(names, function(memo, n) {
            modules[memo] = app.findModule(memo);
            return [memo, n].join('/');
          });
          app.module(name);
          return app.done(function() {
            var i, m, u;
            i = names.length;
            while (i--) {
              u = names.slice(0, +i + 1 || 9e9).join('/');
              m = app.findModule(u);
              if (!m.router && !modules[u]) {
                delete m.parent[names[i]];
              }
            }
            return Backbone.history.loadUrl(name);
          });
        }
      });
      return Backbone.history.start();
    };
    coala.registerComponentHandler = function(name, init, fn) {
      return ComponentHandler.register(name, init, fn);
    };
    coala.startApplication = function(path) {
      var app;
      app = !path ? startDefaultApplication() : require(path)();
      app.loadView = function() {
        var args, feature, name;
        feature = arguments[0], name = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (!feature) {
          throw new Error('a view must be within a feature');
        }
        args = ['view', feature.module, feature, name].concat(args);
        return LoaderPluginManager.invoke.apply(LoaderPluginManager, args);
      };
      return app;
    };
    coala.LoaderPluginManager = LoaderPluginManager;
    return coala;
  });

}).call(this);
