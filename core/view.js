// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['jquery', 'underscore', 'coala/core/base-view', 'coala/core/config', 'coala/core/model', 'coala/core/collection'], function($, _, BaseView, config, Model, Collection) {
    var View, getPath;
    getPath = config.getPath;
    return View = (function(_super) {

      __extends(View, _super);

      function View(options) {
        var _ref, _ref1;
        this.options = options;
        this.baseName = options.baseName;
        this.feature = options.feature;
        this.module = options.module;
        this.model = options.model;
        View.__super__.constructor.call(this, options);
        this.deferredModel = this.initModel();
        this.deferredCollection = this.initCollection();
        if ((_ref = this.promises) != null) {
          _ref.push(this.deferredModel);
        }
        if ((_ref1 = this.promises) != null) {
          _ref1.push(this.deferredCollection);
        }
      }

      View.prototype.url = function() {
        return this.feature.url() + '/' + this.baseName;
      };

      View.prototype.initModel = function() {
        var deferred, u,
          _this = this;
        deferred = $.Deferred();
        if (this.model) {
          if (_.isFunction(this.model)) {
            this.model = this.model.call(this);
          }
          if (_.isString(this.model)) {
            u = this.feature.module.getApplication().url(this.model);
            this.modelDefinition = Model.extend({
              url: function() {
                return u;
              }
            });
            this.model = new this.modelDefinition();
          }
          deferred.resolve();
          return deferred.promise();
        }
        if (!this.options.path) {
          this.model = this.feature.model;
          this.collection = this.feature.collection;
          deferred.resolve();
          return deferred.promise();
        }
        if (this.options.avoidLoadingModel === true) {
          this.modelDefinition = Model.extend({
            feature: this.feature,
            path: this.options.path
          });
          this.model = new this.modelDefinition();
          deferred.resolve();
          return deferred.promise();
        }
        this.module.loadResource(getPath(this.feature, 'model', this.options.path)).done(function(def) {
          if (!def) {
            _this.modelDefinition = Model.extend({
              feature: _this.feature,
              path: _this.options.path
            });
            _this.model = new _this.modelDefinition();
            return deferred.resolve();
          } else {
            def.feature = _this.feature;
            def.path = _this.options.path;
            _this.modelDefinition = Model.extend(def);
            _this.model = new _this.modelDefinition();
            return deferred.resolve();
          }
        });
        return deferred.promise();
      };

      View.prototype.initCollection = function() {
        var _this = this;
        if (this.collection) {
          return;
        }
        return this.deferredModel.done(function() {
          return _this.collection = new (Collection.extend({
            feature: _this.feature,
            path: _this.options.path
          }))(null, {
            model: _this.modelDefinition
          });
        });
      };

      return View;

    })(BaseView);
  });

}).call(this);
