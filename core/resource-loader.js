// Generated by CoffeeScript 1.4.0
(function() {

  define(['jquery', 'underscore', 'coala/core/util', 'coala/core/config'], function($, _, util, config) {
    var defaultHandler, error, filePromise, files, helperPath, log, resourceLoader;
    log = util.log, error = util.error;
    defaultHandler = require.onError;
    require.onError = function(err) {
      var name, _i, _len, _ref, _results;
      if (err.requireType === 'timeout') {
        log({
          baseName: 'NOTFOUND'
        }, "timeout when load modules:" + err.requireModules);
        _ref = err.requireModules.split(' ');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          _results.push(require.s.contexts._.completeLoad(name));
        }
        return _results;
      } else {
        return defaultHandler.call(require, err);
      }
    };
    helperPath = config.helperPath || '';
    files = null;
    filePromise = $.Deferred();
    if (config.noBackend === true) {
      filePromise.resolve();
      require.s.contexts._.config.urlArgs = config.development ? '_c=' + (new Date()).getTime() : '';
    } else {
      $.get(helperPath + '/development', function(data) {
        config.development = data === 'false' ? false : true;
        if (config.development === true && files === null) {
          files = {};
          $.get(helperPath, {
            root: config.appRoot
          }, function(data) {
            _.extend(files, data);
            return filePromise.resolve();
          }, 'json');
        } else {
          filePromise.resolve();
        }
        return require.s.contexts._.config.urlArgs = config.development ? '_c=' + (new Date()).getTime() : '';
      });
    }
    resourceLoader = function(resource, plugin) {
      var deferred, load, loadIt, path,
        _this = this;
      deferred = $.Deferred();
      path = plugin ? plugin + '!' + resource : resource;
      load = function(path) {
        return require([path], function(result) {
          return deferred.resolve(result);
        });
      };
      loadIt = function() {
        var filename, folder, idx;
        if (config.noBackend === true || !config.development) {
          return load(path);
        }
        if (resource.substring(0, config.appRoot.length) === config.appRoot) {
          idx = resource.lastIndexOf('/');
          folder = config.scriptRoot + '/' + (resource.substring(0, idx + 1));
          filename = resource.substring(idx + 1);
          if (!files[folder] || !files[folder][filename]) {
            return deferred.resolve(null);
          } else {
            return load(path);
          }
        } else {
          return load(path);
        }
      };
      log({
        baseName: 'resource loader'
      }, 'load path:', path);
      $.when(filePromise).then(function() {
        return loadIt();
      });
      return deferred.promise();
    };
    return resourceLoader;
  });

}).call(this);
