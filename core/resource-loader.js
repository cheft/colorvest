// Generated by CoffeeScript 1.4.0

define(['jquery', 'underscore', 'coala/core/util', 'coala/core/config'], function($, _, util, config) {
  var error, filePromise, files, helperPath, log, resourceLoader;
  log = util.log, error = util.error;
  helperPath = config.helperPath || '';
  files = null;
  filePromise = $.Deferred();
  if (config.noBackend === true) {
    filePromise.resolve();
    require.s.contexts._.config.urlArgs = config.development ? '_c=' + (new Date()).getTime() : '';
  } else {
    $.get(helperPath + '/development', function(data) {
      config.development = data === 'false' ? false : true;
      if (config.development === true && files === null) {
        files = {};
        $.get(helperPath, {
          root: config.appRoot
        }, function(data) {
          _.extend(files, data);
          return filePromise.resolve();
        }, 'json');
      } else {
        filePromise.resolve();
      }
      return require.s.contexts._.config.urlArgs = config.development ? '_c=' + (new Date()).getTime() : '';
    });
  }
  resourceLoader = function(resource, plugin) {
    var deferred, load, loadIt, path,
      _this = this;
    deferred = $.Deferred();
    path = plugin ? plugin + '!' + resource : resource;
    load = function(path) {
      return require([path], function(result) {
        return deferred.resolve(result);
      }, function(err) {
        var failedId;
        failedId = err.requireModules && err.requireModules[0];
        if (failedId === path) {
          require.undef(path);
          define(path, null);
          return require([path], function() {});
        } else {
          throw err;
        }
      });
    };
    loadIt = function() {
      var filename, folder, idx;
      if (config.noBackend === true || !config.development) {
        return load(path);
      }
      if (resource.substring(0, config.appRoot.length) === config.appRoot) {
        idx = resource.lastIndexOf('/');
        folder = config.scriptRoot + '/' + (resource.substring(0, idx + 1));
        filename = resource.substring(idx + 1);
        if (!files[folder] || !files[folder][filename]) {
          return deferred.resolve(null);
        } else {
          return load(path);
        }
      } else {
        return load(path);
      }
    };
    log({
      baseName: 'resource loader'
    }, 'load path:', path);
    $.when(filePromise).then(function() {
      return loadIt();
    });
    return deferred.promise();
  };
  return resourceLoader;
});
