// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  define(['jquery', 'underscore', 'coala/core/config', 'coala/core/util', 'coala/core/model', 'coala/core/collection', 'coala/core/layout', 'coala/core/loader-plugin-manager'], function($, _, config, util, Model, Collection, Layout, loaderPluginManager) {
    var Feature, error, getPath, log;
    getPath = config.getPath;
    log = util.log, error = util.error;
    Feature = (function() {

      function Feature(options, startupOptions) {
        var key, old, value, _ref;
        this.options = options;
        this.startupOptions = startupOptions != null ? startupOptions : {};
        this.cid = _.uniqueId('feature');
        this.baseName = options.baseName;
        this.module = options.module;
        if (options.model) {
          this.model = options.model;
        }
        if (options.collection) {
          this.collection = options.collection;
        }
        if (this.options.extend) {
          _ref = this.options.extend;
          for (key in _ref) {
            value = _ref[key];
            old = this[key];
            if (_.isFunction(value)) {
              value = _.bind(value, this, old);
            }
            this[key] = value;
          }
        }
        this.initRenderTarget();
        this.deferredLayout = this.initLayout();
        this.deferredModel = this.initModel();
        this.deferredCollection = this.initCollection();
        this.deferredView = this.initViews();
      }

      Feature.prototype.initRenderTarget = function() {
        var target;
        target = this.container || this.options.container || this.startupOptions.container || config.featureContainer;
        if (_.isFunction(target)) {
          target = target(this);
        }
        return this.container = target;
      };

      Feature.prototype.initLayout = function() {
        var layout,
          _this = this;
        layout = this.options.layout;
        if (!layout) {
          layout = this.baseName;
        }
        return this.module.loadResource(getPath(this, 'layout', layout)).done(function(def) {
          if (!def) {
            error(_this, 'no layout defined with name:', getPath(_this, 'layout', layout));
          }
          def.el = _this.container;
          def.baseName = layout.charAt(0) === '/' ? layout.substring(1) : layout;
          def.feature = _this;
          def.module = _this.module;
          return _this.layout = new Layout(def);
        });
      };

      Feature.prototype.initModel = function() {
        var deferred,
          _this = this;
        if (this.model) {
          return;
        }
        deferred = $.Deferred();
        if (this.options.avoidLoadingModel === true) {
          this.modelDefinition = Model.extend({
            feature: this
          });
          this.model = new this.modelDefinition();
          deferred.resolve();
          return deferred.promise();
        }
        this.module.loadResource(getPath(this, 'model', this.baseName)).done(function(def) {
          if (!def) {
            _this.modelDefinition = Model.extend({
              feature: _this
            });
            _this.model = new _this.modelDefinition();
            return deferred.resolve();
          } else {
            def.feature = _this;
            _this.modelDefinition = Model.extend(def);
            _this.model = new _this.modelDefinition();
            return deferred.resolve();
          }
        });
        return deferred.promise();
      };

      Feature.prototype.initCollection = function() {
        var _this = this;
        if (this.collection) {
          return;
        }
        return this.deferredModel.done(function() {
          return _this.collection = new (Collection.extend({
            feature: _this
          }))(null, {
            model: _this.modelDefinition
          });
        });
      };

      Feature.prototype.initViews = function() {
        var defered, promises, view, views, _i, _len, _ref,
          _this = this;
        this.inRegionViews = {};
        this.views = {};
        views = [];
        promises = [this.deferredLayout, this.deferredModel];
        _ref = this.options.views || [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          view = _.isString(view) ? {
            name: view
          } : view;
          views.push(view);
          promises.push(loaderPluginManager.invoke('view', this.module, this, view.name, view));
        }
        defered = $.when.apply($, promises).then(_.bind(function() {
          var args, i, u1, u2, v, vs, _j, _len1;
          vs = arguments[0], u1 = arguments[1], u2 = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
          for (i = _j = 0, _len1 = args.length; _j < _len1; i = ++_j) {
            v = args[i];
            _this.views[i] = _this.views[vs[i].name] = v;
            if (vs[i].region) {
              _this.inRegionViews[vs[i].region] = _this.views[i];
            }
          }
        }, this, views));
        return defered.promise();
      };

      Feature.prototype.showView = function(region, view) {
        var deferred, promise, _ref,
          _this = this;
        deferred = $.Deferred();
        if (!view) {
          view = this.inRegionViews[region];
        }
        if (_.isNumber(view)) {
          view = this.views[index];
        }
        if (!view) {
          return;
        }
        promise = this.deferredStart ? this.deferredStart.promise() : this.start();
        if (((_ref = this.layout[region].currentView) != null ? _ref.cid : void 0) === view.cid) {
          deferred.resolve();
        } else {
          view.on('show', _.once(function() {
            return deferred.resolve();
          }));
          promise.done(function() {
            return _this.layout[region].show(view);
          });
        }
        return deferred.promise();
      };

      Feature.prototype.url = function() {
        return this.module.url(this.baseName);
      };

      Feature.prototype.path = function() {
        return this.module.path(this.baseName, true);
      };

      Feature.prototype.request = function(options) {
        options.url = this.url() + '/' + options.url;
        return $.ajax(options);
      };

      Feature.prototype.activate = function(options) {
        this.startupOptions = options;
        return this.start();
      };

      Feature.prototype.stop = function() {};

      Feature.prototype.start = function() {
        var rendered, views,
          _this = this;
        this.deferredStart = $.Deferred();
        views = [];
        rendered = {};
        this.deferredView.done(function() {
          return _this.layout.render(function() {
            var region, view, _ref, _ref1, _results;
            _ref = _this.inRegionViews;
            for (region in _ref) {
              view = _ref[region];
              views.push(region);
            }
            _ref1 = _this.inRegionViews;
            _results = [];
            for (region in _ref1) {
              view = _ref1[region];
              view.on('show', _.once(_.bind(function(rr, vs, rd) {
                rd[rr] = true;
                if (_.all(vs, function(r) {
                  return !!rd[r];
                })) {
                  return this.deferredStart.resolve(this);
                }
              }, _this, region, views, rendered)));
              _results.push(_this.layout[region].show(view));
            }
            return _results;
          });
        });
        return this.deferredStart.promise();
      };

      Feature.prototype.genEventName = function(eventName) {
        return this.path() + '#' + eventName;
      };

      Feature.prototype.isFeatureEvent = function(eventName) {
        return eventName.indexOf('#') !== -1;
      };

      Feature.prototype.on = function(eventName, callback, context) {
        var name;
        if (eventName.indexOf('#') === -1) {
          name = this.genEventName(eventName);
        } else {
          name = eventName.indexOf('this#') !== -1 ? this.genEventName(eventName.split('#')[1]) : eventName;
        }
        return this.module.getApplication().vent.on(name, callback, context);
      };

      Feature.prototype.trigger = function() {
        var args, event, eventName, _ref;
        eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        event = this.genEventName(eventName);
        return (_ref = this.module.getApplication().vent).trigger.apply(_ref, [event, this].concat(args));
      };

      Feature.prototype.delegateDomEvent = function(view, eventName, exists) {
        return function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (_.isFunction(exists)) {
            exists();
          }
          return (_ref = view.feature).trigger.apply(_ref, [eventName, view].concat(args));
        };
      };

      Feature.prototype.delegateComponentEvent = function(view, obj, eventName, exists) {
        return function() {
          var args, _ref;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          (_ref = view.feature).trigger.apply(_ref, [eventName, view, obj.component].concat(args));
          if (_.isString(exists)) {
            return view.bindEventHandler(exists).apply(view, args);
          }
        };
      };

      return Feature;

    })();
    return Feature;
  });

}).call(this);
