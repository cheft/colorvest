// Generated by CoffeeScript 1.4.0
(function() {

  define(['jquery', 'underscore', 'coala/core/view', 'coala/core/config', 'coala/scaffold/abstract-view-loader'], function($, _, View, config, viewLoader) {
    var handlers;
    handlers = {
      add: function() {
        var _this = this;
        this.feature.views['forms:add'].model.clear();
        return viewLoader.submitHandler.call(this, {
          submitSuccess: function(type) {
            return _this.feature.views['views:grid'].components[0].trigger('reloadGrid');
          }
        }, 'forms:add', viewLoader.getDialogTitle(this.feature.views['forms:add'], 'add', '新增'));
      },
      edit: function() {
        var app, grid, selected, view,
          _this = this;
        grid = this.feature.views['views:grid'].components[0];
        view = this.feature.views['forms:edit'];
        app = this.feature.module.getApplication();
        selected = grid.getGridParam('selrow');
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        view.model.set('id', selected);
        return $.when(view.model.fetch()).then(function() {
          return viewLoader.submitHandler.call(_this, {
            submitSuccess: function(type) {
              return _this.feature.views['views:grid'].components[0].trigger('reloadGrid');
            }
          }, 'forms:edit', viewLoader.getDialogTitle(_this.feature.views['forms:edit'], 'edit', '编辑'));
        });
      },
      del: function() {
        var app, grid, selected,
          _this = this;
        grid = this.feature.views['views:grid'].components[0];
        selected = grid.getGridParam('selrow');
        app = this.feature.module.getApplication();
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        this.feature.model.set('id', selected);
        return $.when(this.feature.model.destroy()).then(function(data) {
          var err, msg, summary, _i, _len, _ref;
          if (data.violations) {
            msg = '';
            summary = '';
            _ref = data.violations;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              err = _ref[_i];
              if (!err.properties) {
                summary += err.message + '\n';
              }
            }
            msg += summary;
            app.error(msg, '验证提示');
            return;
          }
          return grid.trigger('reloadGrid');
        });
      },
      show: function() {
        var app, grid, selected, view,
          _this = this;
        grid = this.feature.views['views:grid'].components[0];
        view = this.feature.views['forms:show'];
        selected = grid.getGridParam('selrow');
        app = this.feature.module.getApplication();
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        view.model.set('id', selected);
        return $.when(view.model.fetch()).then(function() {
          return app.showDialog({
            view: view,
            title: viewLoader.getDialogTitle(_this.feature.views['forms:show'], 'show', '查看'),
            buttons: []
          }).done(function() {
            var data;
            data = view.model.toJSON();
            return _(view.components).each(function(component) {
              if (_.isFunction(component.loadData)) {
                return component.loadData(data);
              }
            });
          });
        });
      },
      refresh: function() {
        var grid;
        grid = this.feature.views['views:grid'].components[0];
        return grid.trigger('reloadGrid');
      }
    };
    return {
      type: 'view',
      name: 'views',
      fn: function(module, feature, viewName, args) {
        var deferred, initVisibility, scaffold, visibility;
        deferred = $.Deferred();
        if (viewName === 'operators') {
          viewLoader.generateOperatorsView({
            handlers: handlers
          }, module, feature, deferred);
        } else if (viewName === 'grid') {
          scaffold = feature.options.scaffold || {};
          visibility = scaffold.ensureOperatorsVisibility || viewLoader.ensureOperatorsVisibility;
          initVisibility = scaffold.initOperatorsVisibility || viewLoader.initOperatorsVisibility;
          viewLoader.generateGridView({
            createView: function(options) {
              options.components[0].onSelectRow = 'selectionChanged';
              options.components[0].beforeRequest = 'refresh';
              return new View(options);
            },
            handlers: {
              selectionChanged: function(id, status) {
                var v;
                if (!status) {
                  return;
                }
                v = this.feature.views['views:operators'];
                return visibility.call(v, v.options.operators, id);
              },
              refresh: function() {
                var v;
                v = this.feature.views['views:operators'];
                return initVisibility.call(v, v.options.operators);
              }
            }
          }, module, feature, deferred);
        }
        return deferred;
      }
    };
  });

}).call(this);
