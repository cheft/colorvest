// Generated by CoffeeScript 1.4.0
(function() {

  define(['jquery', 'underscore', 'coala/core/view', 'coala/core/config'], function($, _, View, config) {
    var getPath, result;
    getPath = config.getPath;
    result = {};
    result.templates = {
      operator: _.template('<div class="btn-group">\n  <button id="<%= id %>" class="btn" onclick="return false;">\n    <% if (icon) { %>\n        <i class="<%= icon %>"/>&nbsp;\n    <% } %>\n    <%= label %></button>\n</div>'),
      grid: '<table style="width:100%;" id="grid"/>\n<div id="pager"/>',
      tree: '<ul style="width:100%;" id="tree" class="ztree"/>'
    };
    result.getDialogTitle = function(view, type, prefix) {
      var dt, _ref;
      dt = (_ref = view.feature.options.scaffold) != null ? _ref.defineDialogTitle : void 0;
      if (_.isFunction(dt)) {
        return dt.apply(view, [view, type]);
      } else if (_.isObject(dt)) {
        return dt[type];
      }
      if (view.options.entityLabel) {
        return prefix + view.options.entityLabel;
      }
      return prefix;
    };
    result.getFormData = function(view) {
      var data, values;
      values = view.$$('form').serializeArray();
      data = {};
      _(values).map(function(item) {
        if (item.name in data) {
          return data[item.name] = _.isArray(data[item.name]) ? data[item.name].concat([item.value]) : [data[item.name], item.value];
        } else {
          return data[item.name] = item.value;
        }
      });
      view.model.set(data);
      return _(view.components).each(function(component) {
        var d;
        if (_.isFunction(component.getFormData)) {
          d = component.getFormData();
          if (d) {
            return view.model.set(d.name, d.value);
          }
        }
      });
    };
    result.initOperatorsVisibility = function(operators) {
      var o, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = operators.length; _i < _len; _i++) {
        o = operators[_i];
        if (['edit', 'del', 'show'].indexOf(o.id) !== -1) {
          _results.push(this.$(o.id).hide());
        }
      }
      return _results;
    };
    result.ensureOperatorsVisibility = function(operators, id) {
      var o, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = operators.length; _i < _len; _i++) {
        o = operators[_i];
        if (['edit', 'del', 'show'].indexOf(o.id) !== -1) {
          _results.push(id ? this.$(o.id).show() : this.$(o.id).hide());
        }
      }
      return _results;
    };
    result.extendEventHandlers = function(view, handlers) {
      var eventHandlers, scaffold;
      scaffold = view.feature.options.scaffold || {};
      eventHandlers = _.extend({}, handlers, scaffold.handlers);
      return _.extend(view.eventHandlers, eventHandlers);
    };
    result.submitHandler = function(options, viewName, title, type) {
      var app, ok, view;
      view = this.feature.views[viewName];
      app = this.feature.module.getApplication();
      ok = function() {
        var validator;
        result.getFormData(view);
        validator = view.$$('form').valid();
        if (!validator) {
          return false;
        }
        $.when(view.model.save()).then(function(data) {
          var err, label, labels, msg, summary, _i, _j, _len, _len1, _ref;
          if (data.violations) {
            msg = '';
            summary = '';
            labels = view.forms.fields;
            _ref = data.violations;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              err = _ref[_i];
              if (!err.properties) {
                summary += err.message + '\n';
              }
              for (_j = 0, _len1 = labels.length; _j < _len1; _j++) {
                label = labels[_j];
                if (label.name === err.properties) {
                  msg += "" + [label.label] + " " + err.message + "\n";
                }
              }
            }
            msg += summary;
            app.error(msg, '验证提示');
            return;
          }
          options.submitSuccess(type);
          app.success('操作成功');
          return app._modalDialog.modal.modal('hide');
        }, function() {
          return app.error('系统出错！');
        });
        return false;
      };
      return app.showDialog({
        view: view,
        title: title,
        buttons: [
          {
            label: 'Ok',
            fn: ok
          }
        ]
      }).done(function(dialog) {
        var data, v;
        v = dialog.startupOptions.view;
        data = v.model.toJSON();
        return _(v.components).each(function(component) {
          if (_.isFunction(component.loadData)) {
            return component.loadData(data);
          }
        });
      }).done(function() {
        if (!view.forms.validator) {
          return;
        }
        return view.$$('form').validate({
          rules: view.forms.validator.rules,
          messages: view.forms.validator.messages,
          highlight: function(label) {
            $(label).closest('.control-group').removeClass('success');
            return $(label).closest('.control-group').addClass('error');
          },
          success: function(label) {
            $(label).text('OK!').addClass('valid').closest('.control-group').removeClass('error');
            return $(label).text('OK!').addClass('valid').closest('.control-group').addClass('success');
          }
        });
      });
    };
    result.generateOperatorsView = function(options, module, feature, deferred) {
      return feature.request({
        url: options.url || 'configuration/operators'
      }).done(function(data) {
        var delegates, events, name, o, ops, strings, value, view, viewOptions, _i, _len;
        strings = [];
        events = {};
        delegates = {};
        ops = [];
        for (name in data) {
          value = data[name];
          if (_.isString(value)) {
            value = {
              label: value
            };
          }
          value.id = name;
          ops.push(value);
        }
        for (_i = 0, _len = ops.length; _i < _len; _i++) {
          o = ops[_i];
          if (!o.icon) {
            o.icon = 'icon-file';
          }
          strings.push(result.templates.operator(o));
          events['click ' + o.id] = o.id;
          if (o.publish === true) {
            delegates['click ' + o.id] = 'click:' + o.id;
          }
        }
        viewOptions = {
          baseName: 'operators',
          module: module,
          feature: feature,
          events: events,
          delegates: delegates,
          operators: ops,
          extend: {
            renderHtml: function(su, data) {
              var template;
              template = Handlebars.compile(strings.join('') || '');
              return template(data);
            }
          }
        };
        view = options.createView ? options.createView(viewOptions) : new View(viewOptions);
        result.extendEventHandlers(view, options.handlers);
        return deferred.resolve(view);
      });
    };
    result.generateGridView = function(options, module, feature, deferred) {
      return feature.request({
        url: options.url || 'configuration/grid'
      }).done(function(data) {
        var events, view, viewOptions;
        data.type = 'grid';
        data.selector = 'grid';
        data.pager = 'pager';
        events = data.events || {};
        viewOptions = {
          baseName: 'grid',
          module: module,
          feature: feature,
          components: [data],
          events: events,
          extend: {
            renderHtml: function(su, data) {
              return result.templates.grid;
            }
          }
        };
        view = options.createView ? options.createView(viewOptions) : new View(viewOptions);
        result.extendEventHandlers(view, options.handlers);
        return deferred.resolve(view);
      });
    };
    result.generateTreeView = function(options, module, feature, deferred) {
      return feature.request({
        url: options.url || 'configuration/tree'
      }).done(function(data) {
        var events, view, viewOptions;
        if (data === 'undefined') {
          data = {};
        }
        data.type = 'tree';
        data.selector = 'tree';
        events = data.events || {};
        viewOptions = {
          baseName: 'tree',
          module: module,
          feature: feature,
          components: [data],
          events: events,
          extend: {
            renderHtml: function(su, data) {
              return result.templates.tree;
            }
          }
        };
        view = options.createView ? options.createView(viewOptions) : new View(viewOptions);
        result.extendEventHandlers(view, options.handlers);
        return deferred.resolve(view);
      });
    };
    return result;
  });

}).call(this);
