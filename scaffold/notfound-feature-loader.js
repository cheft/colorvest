// Generated by CoffeeScript 1.4.0
(function() {

  define(['jquery', 'coala/core/feature'], function($, Feature) {
    return {
      type: 'feature',
      name: 'notfound',
      fn: function(module, feature, featureName, args) {
        var deferred, options;
        options = args[0];
        deferred = $.Deferred();
        $.when($.get(module.url(featureName) + '/configuration/feature')).done(function(data) {
          var opts, views;
          views = [];
          if (data.views) {
            views = data.views;
          } else {
            if (data.style === 'grid') {
              views.push({
                name: 'views:operators',
                region: 'operators'
              });
              views.push({
                name: 'views:grid',
                region: 'grid'
              });
            } else if (data.style === 'tree') {
              views.push({
                name: 'treeViews:operators',
                region: 'operators'
              });
              views.push({
                name: 'treeViews:tree',
                region: 'grid'
              });
            } else if (data.style === 'treeTable') {
              views.push({
                name: 'treeTableViews:operators',
                region: 'operators'
              });
              views.push({
                name: 'treeTableViews:grid',
                region: 'grid'
              });
            }
            views.push('forms:add');
            views.push('forms:edit');
            views.push('forms:show');
          }
          opts = {
            baseName: featureName,
            module: module,
            avoidLoadingModel: true,
            layout: '/grid',
            views: views
          };
          if (data.enableFrontendExtension === true) {
            return module.loadResource('__scaffold__/' + featureName).done(function(scaffold) {
              opts.scaffold = scaffold;
              return deferred.resolve(new Feature(opts, options));
            });
          } else {
            return deferred.resolve(new Feature(opts, options));
          }
        });
        return deferred;
      }
    };
  });

}).call(this);
