// Generated by CoffeeScript 1.4.0
(function() {

  define(['jquery', 'underscore', 'coala/core/view', 'coala/core/config', 'coala/scaffold/abstract-view-loader'], function($, _, View, config, viewLoader) {
    var handlers;
    handlers = {
      add: function() {
        var selected, tree,
          _this = this;
        this.feature.views['forms:add'].model.clear();
        tree = this.feature.views['treeViews:tree'].components[0];
        selected = tree.getSelectedNodes()[0];
        if (selected) {
          this.feature.views['forms:add'].model.set('parent', selected);
        }
        return viewLoader.submitHandler.call(this, {
          submitSuccess: function() {
            return tree.addNodes(selected, _this.feature.views['forms:add'].model.toJSON());
          }
        }, 'forms:add', viewLoader.getDialogTitle(this.feature.views['forms:add'], 'add', '新增'), 'add');
      },
      edit: function() {
        var app, selected, tree, view,
          _this = this;
        tree = this.feature.views['treeViews:tree'].components[0];
        view = this.feature.views['forms:edit'];
        app = this.feature.module.getApplication();
        selected = tree.getSelectedNodes()[0];
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        view.model.set(selected);
        return $.when(view.model.fetch()).then(function() {
          return viewLoader.submitHandler.call(_this, {
            submitSuccess: function() {
              _.extend(selected, view.model.toJSON());
              return tree.refresh();
            }
          }, 'forms:edit', viewLoader.getDialogTitle(_this.feature.views['forms:edit'], 'edit', '编辑'), 'edit');
        });
      },
      del: function() {
        var app, selected, tree,
          _this = this;
        tree = this.feature.views['treeViews:tree'].components[0];
        selected = tree.getSelectedNodes()[0];
        app = this.feature.module.getApplication();
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        this.feature.model.set('id', selected.id);
        return $.when(this.feature.model.destroy()).then(function(data) {
          var err, msg, summary, _i, _len, _ref;
          if (data.violations) {
            msg = '';
            summary = '';
            _ref = data.violations;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              err = _ref[_i];
              if (!err.properties) {
                summary += err.message + '\n';
              }
            }
            msg += summary;
            app.error(msg, '验证提示');
            return;
          }
          return tree.removeNode(selected);
        });
      },
      show: function() {
        var app, selected, tree, view,
          _this = this;
        app = this.feature.module.getApplication();
        tree = this.feature.views['treeViews:tree'].components[0];
        selected = tree.getSelectedNodes()[0];
        view = this.feature.views['forms:show'];
        if (!selected) {
          return app.info('请选择要操作的记录');
        }
        view.model.set('id', selected.id);
        return $.when(view.model.fetch()).then(function() {
          return app.showDialog({
            view: view,
            title: viewLoader.getDialogTitle(_this.feature.views['forms:show'], 'show', '查看'),
            buttons: []
          }).done(function() {
            var data;
            data = view.model.toJSON();
            return _(view.components).each(function(component) {
              if (_.isFunction(component.loadData)) {
                return component.loadData(data);
              }
            });
          });
        });
      },
      refresh: function() {
        var tree;
        tree = this.feature.views['treeViews:tree'].components[0];
        return tree.refresh();
      }
    };
    return {
      type: 'view',
      name: 'treeViews',
      fn: function(module, feature, viewName, args) {
        var deferred, initVisibility, scaffold, visibility;
        scaffold = feature.options.scaffold || {};
        visibility = scaffold.ensureOperatorsVisibility || viewLoader.ensureOperatorsVisibility;
        initVisibility = scaffold.initOperatorsVisibility || viewLoader.initOperatorsVisibility;
        deferred = $.Deferred();
        if (viewName === 'operators') {
          viewLoader.generateOperatorsView({
            handlers: handlers
          }, module, feature, deferred);
        } else if (viewName === 'tree') {
          viewLoader.generateTreeView({
            createView: function(options) {
              var t;
              options.events.click = 'clearSelection';
              t = options.components[0];
              t.callback || (t.callback = {});
              t.callback.onClick = 'selectionChanged';
              return new View(options);
            },
            handlers: {
              clearSelection: function(e) {
                var name, v;
                name = e.target.tagName;
                if (name === 'LI' || name === 'UL') {
                  this.components[0].cancelSelectedNode();
                  v = this.feature.views['treeViews:operators'];
                  return initVisibility.call(v, v.options.operators);
                }
              },
              selectionChanged: function(e, treeId, node, status) {
                var v;
                if (!status) {
                  return;
                }
                v = this.feature.views['treeViews:operators'];
                return visibility.call(v, v.options.operators, node.id);
              }
            }
          }, module, feature, deferred);
          deferred.done(function(v) {
            return v.collection.on('reset', function() {
              v = this.feature.views['treeViews:operators'];
              return initVisibility.call(v, v.options.operators);
            });
          });
        }
        return deferred;
      }
    };
  });

}).call(this);
