// Generated by CoffeeScript 1.4.0
(function() {

  define(['jquery', 'underscore', 'zui/coala/application', 'zui/coala/browser', 'zui/coala/component-handler', 'zui/coala/config', 'libs/jquery/pnotify/jquery.pnotify'], function($, _, Application, detectBrowser, ComponentHandler, config) {
    var application, c, modifyFeatureContainerDeferred, openedFeatures, stack_bar_top;
    detectBrowser();
    c = new Application();
    application = new Application();
    application.coala = c;
    delete c.module;
    c.paths = [config.coalaFeaturesPath];
    c.baseName = 'coala';
    c.applicationRoot = application;
    c.getPromises = function() {
      return application.promises;
    };
    c.initRouters();
    application.addPromise(ComponentHandler.initialize());
    application.addPromise($.get('invoke/scaffold/system/settings', function(data) {
      var settings;
      settings = {};
      _.each(data.results, function(d) {
        return settings[d.name] = d.value;
      });
      application.settings = settings;
      return c.settings = settings;
    }));
    modifyFeatureContainerDeferred = $.Deferred();
    openedFeatures = {};
    application.done(function() {
      return application.startFeature('coala/home').done(function(home) {
        var mainTab;
        application.mainTab = mainTab = home.layout.components[0];
        mainTab.$el.bind('tabsremove', function(event, ui) {
          return application.stopFeature(openedFeatures[ui.tab.hash]);
        });
        config.featureContainer = function(feature) {
          var id;
          id = '#' + feature.cid;
          openedFeatures[id] = feature;
          mainTab.addTab({
            url: id,
            label: feature.startupOptions.name || feature.baseName,
            closable: feature.options.closable !== false,
            selected: true,
            fit: 'Home' !== feature.startupOptions.name
          });
          feature.active = _.bind(function(id) {
            return mainTab.selectTab(id);
          }, feature, id);
          return id;
        };
        return modifyFeatureContainerDeferred.resolve();
      });
    });
    application.addPromise(modifyFeatureContainerDeferred);
    $.pnotify.defaults.history = false;
    stack_bar_top = {
      "dir1": "down",
      "dir2": "right",
      "push": "top",
      "spacing1": 0,
      "spacing2": 0
    };
    application.message = function(content, title) {
      var options;
      if (title == null) {
        title = false;
      }
      content = _.isObject(content) ? content : {
        text: content
      };
      if (_.isString(title)) {
        content.title = title;
      }
      options = _.extend({
        stack: stack_bar_top,
        addclass: 'stack-bar-top',
        width: '70%',
        cornerclass: ""
      }, content);
      return $.pnotify(options);
    };
    application.error = function(content, title) {
      var options;
      if (title == null) {
        title = false;
      }
      content = _.isObject(content) ? content : {
        text: content
      };
      if (_.isString(title)) {
        content.title = title;
      }
      options = _.extend({
        type: 'error'
      }, content);
      return application.message(options);
    };
    application.info = function(content, title) {
      var options;
      if (title == null) {
        title = false;
      }
      content = _.isObject(content) ? content : {
        text: content
      };
      if (_.isString(title)) {
        content.title = title;
      }
      options = _.extend({
        type: 'info'
      }, content);
      return application.message(options);
    };
    application.success = function(content, title) {
      var options;
      if (title == null) {
        title = false;
      }
      content = _.isObject(content) ? content : {
        text: content
      };
      if (_.isString(title)) {
        content.title = title;
      }
      options = _.extend({
        type: 'success'
      }, content);
      return application.message(options);
    };
    application.showDialog = function(options) {
      var deferred;
      deferred = $.Deferred();
      if (!application._modalDialog) {
        application.startFeature('coala/dialog', true, options).done(function(feature) {
          application._modalDialog = feature;
          return deferred.resolve(feature);
        });
      } else {
        application._modalDialog.show(options).done(function(feature) {
          return deferred.resolve(feature);
        });
      }
      return deferred;
    };
    return application;
  });

}).call(this);
