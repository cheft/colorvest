// Generated by CoffeeScript 1.4.0
(function() {

  define(["underscore", "jquery", "libs/bootstrap/bootstrap"], function(_, $) {
    return {
      views: [
        {
          name: "dialog-title",
          region: "title"
        }, {
          name: "dialog-buttons",
          region: "buttons"
        }
      ],
      avoidLoadingModel: true,
      extend: {
        initRenderTarget: function(su) {
          var c, id, me, root;
          root = this.module.getApplication();
          id = _.uniqueId("dialog");
          me = this;
          $("<div class=\"modal hide\" id=\"" + id + "\"><div id=\"" + this.startupOptions.view.cid + "\"></div>").appendTo(document.body);
          this.containerId = id;
          this.dialogContainer = c = $("#" + id);
          c.on("hide", function(event) {
            if (me.startedOptions.length > 1) {
              event.preventDefault();
            }
            return me.close();
          });
          if (this.startupOptions.view.options.dialogClass) {
            c.addClass(this.startupOptions.view.options.dialogClass);
          }
          return this.container = $("#" + this.startupOptions.view.cid);
        },
        stop: function(su) {
          var root;
          root = this.module.getApplication();
          if (this.startupOptions.view.options.dialogClass) {
            this.dialogContainer.removeClass(this.startupOptions.view.options.dialogClass);
          }
          return su.apply(this);
        },
        start: function(su) {
          var deferred, me, startedOptions;
          me = this;
          deferred = $.Deferred();
          startedOptions = me.startedOptions || (me.startedOptions = []);
          startedOptions.push(me.startupOptions);
          me.inRegionViews["body"] = me.startupOptions.view;
          this.deferredView.done(function() {
            var promise;
            promise = su.call(me);
            return promise.done(function() {
              me.modal = $("#" + me.containerId).modal();
              return deferred.resolve(me);
            });
          });
          return deferred.promise();
        },
        show: function(su, options) {
          var currentView, deferred, view;
          view = $("#" + options.view.cid);
          currentView = this.startupOptions.view;
          deferred = $.Deferred();
          if (view.size() !== 0) {
            if (currentView.options.dialogClass) {
              this.dialogContainer.removeClass(currentView.options.dialogClass);
            }
            if (options.view.options.dialogClass) {
              this.dialogContainer.addClass(options.view.options.dialogClass);
            }
            this.startedOptions.push(options);
            $("#" + currentView.cid).hide();
            view.show();
            deferred.resolve(this);
            return deferred;
          } else {
            this.dialogContainer.append("<div id=\"" + options.view.cid + "\"></div>");
            this.container = $("#" + options.view.cid);
            this.initLayout();
            if (currentView.options.dialogClass) {
              this.dialogContainer.removeClass(currentView.options.dialogClass);
            }
            if (options.view.options.dialogClass) {
              this.dialogContainer.addClass(options.view.options.dialogClass);
            }
            $("#" + currentView.cid).hide();
            this.startupOptions = options;
            return this.start();
          }
        },
        close: function() {
          var app, current, options;
          if (this.startedOptions.length > 1) {
            options = this.startedOptions.pop();
            current = this.startedOptions[this.startedOptions.length - 1];
            if (options.view.options.dialogClass) {
              this.dialogContainer.removeClass(options.view.options.dialogClass);
            }
            if (current.view.options.dialogClass) {
              this.dialogContainer.addClass(current.view.options.dialogClass);
            }
            this.startupOptions = current;
            $("#" + options.view.cid).hide();
            return $("#" + current.view.cid).show();
          } else {
            app = this.module.getApplication();
            app.stopFeature(this);
            app.applicationRoot._modalDialog = null;
            return this.dialogContainer.remove();
          }
        }
      }
    };
  });

}).call(this);
