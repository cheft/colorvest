// Generated by CoffeeScript 1.4.0
(function() {

  define(['underscore', 'jquery', 'coala/coala'], function(_, $, coala) {
    coala.registerComponentHandler('grid-picker', (function() {}), function(el, opt, view) {
      var app, options, result;
      if (opt == null) {
        opt = {};
      }
      if (opt.readOnly === true) {
        return {
          loadData: function(data) {
            return el.html(data[opt.fieldName]['name']);
          }
        };
      }
      app = view.feature.module.getApplication();
      options = _.extend({
        el: el,
        ignoreExists: true
      }, opt);
      options.valueField = view.$(options.valueField);
      result = {
        deferred: $.Deferred()
      };
      if (options.remoteDefined) {
        $.get(view.feature.module.getApplication().url(options.url + '/configuration/picker'), function(data) {
          _.extend(options, data);
          return app.startFeature('coala/grid-picker', options).done(function(feature) {
            result.feature = feature;
            return result.deferred.resolve(feature);
          });
        });
      } else {
        app.startFeature('coala/grid-picker', options).done(function(feature) {
          result.feature = feature;
          return result.deferred.resolve(feature);
        });
      }
      result.loadData = function(data) {
        var value;
        value = data[options.fieldName];
        if (!value) {
          return;
        }
        return result.deferred.done(function(feature) {
          feature.views['grid-picker-field'].$('text').val(value.name);
          return options.valueField.val(value.id);
        });
      };
      return result;
    });
    coala.registerComponentHandler('tree-picker', (function() {}), function(el, opt, view) {
      var app, options;
      if (opt == null) {
        opt = {};
      }
      if (opt.readOnly === true) {
        return {
          loadData: function(data) {
            return el.html(data[opt.fieldName]['name']);
          }
        };
      }
      app = view.feature.module.getApplication();
      options = _.extend({
        el: el,
        ignoreExists: true
      }, opt);
      options.valueField = view.$(options.valueField);
      return app.startFeature('coala/tree-picker', options);
    });
    return coala.registerComponentHandler('many-picker', (function() {}), function(el, opt, view) {
      var app, extendFeature, options, result;
      if (opt == null) {
        opt = {};
      }
      app = view.feature.module.getApplication();
      options = _.extend({
        el: el,
        ignoreExists: true
      }, opt);
      options.valueField = view.$(options.valueField);
      result = {
        deferred: $.Deferred()
      };
      extendFeature = function(feature) {
        feature.getFormData = function() {
          return {
            name: options.fieldName,
            value: result.feature.views['picker-field'].components[0].getDataIDs()
          };
        };
        return feature.loadData = function(data) {
          var values;
          values = data[options.fieldName];
          return this.views['picker-field'].components[0][0].addJSONData({
            rows: values
          });
        };
      };
      if (options.remoteDefined) {
        $.get(view.feature.module.getApplication().url(options.url + '/configuration/picker'), function(data) {
          options.pickerGrid = data != null ? data.grid : void 0;
          return app.startFeature('coala/pick-to-grid', options).done(function(feature) {
            result.feature = feature;
            extendFeature(feature);
            return result.deferred.resolve(feature);
          });
        });
      } else {
        app.startFeature('coala/pick-to-grid', options).done(function(feature) {
          result.feature = feature;
          extendFeature(feature);
          return result.deferred.resolve(feature);
        });
      }
      return result.deferred;
    });
  });

}).call(this);
